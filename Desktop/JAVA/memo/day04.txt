STS 플러그인 설치 
	1) 마켓 플레이스 
	2) 소프트웨어 -> STS https://dist.springsource.com/snapshot/TOOLS/nightly/e4.18
	재시작을 기다렸다가, 이클립스 재시작 시키고 
	Window - preferences - Spring 탭 확인! <<

[프레임워크]
	어플리케이션의 구조를 결정 할 수 있는 뼈대 코드를 제공 
	-> 1번 개발자) ++		2번 개발자) +=10
	1번 개발자의 코드 보수 신청 -> ++ => +=10
	유지보수 과정에서 구조의 변형이 일어나지 않게 일관성을 유지하는데 도움 
	개발자들의 역량 획일화 
	개발자들은 비즈니스  로직에만 집중 할 수 있게해줌 

[스프링 프레임워크]
	"IoC와 AOP를 지원하는 경량 컨테이너 프레임워크"
경량
	POJO 형태의 객체를 관리 할 수 있다.
	plain old java object
	일반적인 객체 <-> Servlet 클래스(일반적인 객체가 아님)
Container
	객체의 생성을 관리
	스프링 또한 일종의 컨테이너 

IoC 
	Inversion of Control
	제어의 역행의 목표 -> 어플리케이션을 구성하는 객체들간의 느슨한 결합 
		        == 낮은 결합도 유지   
	의존관계에 있는 객체를 변경할때, 소스코드를 수정해야함	
 	IoC 적용시, 객체생성을 소스코드로 처리 X 
	컨테이너가 판단하여 대신 처리 
	소스코드에 의존관계가 작성되어 있지 않아, 유지보수가 편리 -> 결합도가 낮아졌기 때문 
+++
	사용자 -> web.xml -> 톰캣 -> Dispatcher, 서블릿(Controller) -> View(jsp)
	결합도를 낮추는것이 목표 == 수정되는 코드를 줄임 

	UI -> Service -> DAO -> DB 
		A1 a= new A1();
		A2 a= new A2();
			A a= new A1();
			....a.getData(); 
				.xml / Annotation( 어노테이션, 애너테이션)
				객체 생성을 외부에서 설정 == DI == 의존성 주입 
+++

AOP
	Aspect Oriented Programming
	관점지향 프로그래밍의 목표 -> 응집도 높은 개발 
	메서드 -> 핵심 로직 => 각 로직마다 반복등장하는 공통로직(횡단관심)이 있음 
	공통으로 사용하는 기능들을 독립된 클래스로 분리
	이 기능을 사용할 때 프로그램 코드에 직접작성 XX 
	선언적으로 처리하여 적용O
	유지보수 향상 

**************
legacy project
MVC 템플릿
com.jang.app
우클릭 - Properties-project facets
	            1) JAVA 버전 변경 
	            2) Runtimes 탭 현재 서버 버전 체크 
Java: src/main/resource에 log4j.xml을 제외한 나머지 전부삭제
아래 src 폴더: main/webapp/WEB-INF의 spring, views 삭제
	web.xml 파일 오픈 -> 루트엘리먼트만 남기고 삭제
	pom.xml에서는 springframework 버전 4.2.4로 변경
	=> 강제 업데이트 (Maven force 체크하기)
**************


IoC를 지원하는 컨테이너 
	서블릿 컨테이너는 어땠지???
	Servlet 클래스를 만들면, 1) 기본생성자:생성됨! 2) doGet():실행됨!, doPost() 메서드
	web.xml 설정파일을 만들기 -> 서블릿 매핑관련 설정을 작성해둠
	사용자가 .jsp 요청시 생성됨! 실행됨!
	브라우저 -> .xml -> url-pattern에 해당하는 URL 요청이 전송 
	-> servlet-name에 등록해둔 서블릿클래스를 찾아 매핑 -> 객체생성 -> 메서드 실행
	결론) 서블릿은 자바로 만들어진 클래스
	메서드를 수행하기위해, 객체를 생성해야함
	누가 서블릿객체를 생성하고, 누가 그 객체가 doGet() 메서드를 호출하여  실행하게 했나???
	=> 서블릿 컨테이너!

결합도 높은 코드 -> 낮추는 방향으로 코딩 
방법1) 인터페이스 
방법2) 디자인패턴
	클라이언트의 코드 변경 없이 객체교체
	Beanfactory






























